import React, { Component } from "react";
import Jumbotron from "../Jumbotron";
import Footer from "../Footer";
import API from "../../utils/API";
import BootstrapTable from 'react-bootstrap-table-next';
import './react-bootstrap-table2.css';
import VisualRecognitionV3 from "watson-developer-cloud/visual-recognition/v3";
import { createReadStream } from "fs";


console.log("In client/src/pages/Dashboard/Dashboard.js");

function zoneDateFormatter(cell, row){
  console.log("Incoming epoch is: ", cell);
  var dateTime = new Date(cell * 1000);
  console.log("Computed Date and Time is: ",dateTime);
  // return ( JSON.stringify(dateTime) );
  // return ( dateTime.toString() );
  return ( dateTime.toLocaleDateString() );
}

function weatherImageFormatter(cell, row){
    return (
        <img src={""+cell+""} alt="weatherImage"/>
    );
}

function zoneImageFormatter(cell, row){
    return (
      <a target="_blank" href={""+cell+""}>
        <img src={""+cell+""} width="60" height="60" border="1 solid" border-color="#3333ff" alt="zoneImage"/>
      </a>
    );
}

const weatherColumns = [{
//   dataField: 'epoch',
//   text: 'Epoch Time',
//   align: 'center'
// },{
  dataField: 'day',
  text: 'Day',
  align: 'center'
}, {
  dataField: 'timeDate',
  text: 'Time and Date',
  align: 'center'
}, {
  dataField: 'tempHigh',
  text: 'High Temp F',
  align: 'center'
}, {
  dataField: 'tempLow',
  text: 'Low Temp F',
  align: 'center'
}, {
  dataField:'avgHum',
  text: "Average Humidity %",
  align: 'center'
}, {
  dataField:'pop',
  text: "Probability of Precipitation (PoP)",
  align: 'center'
}, {
  dataField:'conditions',
  text: "Conditions",
  align: 'center'
}, {
  dataField:'conditionsURL',
  text: "Conditions URL",
  align: 'center', 
  formatter: weatherImageFormatter
}];

const zoneColumns = [{
  dataField: 'zoneNumber',
  text: 'Zone Number',
  align: 'center',
  width:'5%'
},{
  dataField: 'drainage',
  text: 'Zone Drainage',
  align: 'center',
  width:'5%'
}, {
  dataField: 'shade',
  text: 'Zone Shade',
  align: 'center',
  width:'5%'
}, {
  dataField: 'watsonImageClass',
  text: 'Image Class',
  align: 'center',
  width:'10%'
}, {
  dataField:'zoneStatus',
  text: "Zone Status",
  align: 'center',
  width:'5%'
}, {
  dataField:'wateringState',
  text: "Watering State",
  align: 'center',
  width:'5%'
}, {
  dataField:'numbOfSprinklers',
  text: "Number of Sprinklers",
  align: 'center',
  width:'5%'
}, {
  dataField:'dtLastWatered',
  text: "Date Last Watered",
  formatter: zoneDateFormatter,
  align: 'center',
  width:'15%'
}, {
  dataField:'durationOfWatering',
  text: "Duration of Watering (in mts)",
  align: 'center',
  width:'5%'
}, {
  dataField:'projectedNextWaterDateTime',
  text: "Projected Next Watering",
  align: 'center',
  width:'15%'
}, {
  dataField:'recDurationOfWatering',
  text: "Recommended Next Watering Duration",
  align: 'center',
  width:'5%'
}, {
  dataField: 'zoneImage',
  text: 'Zone Image',
  formatter: zoneImageFormatter
}];

const cityRestrColumns = [{
  dataField: 'wateringDay1',
  text: 'Watering Day #1',
  align: 'center'
},{
  dataField: 'wateringDay2',
  text: 'Watering Day #2',
  align: 'center'
}, {
  dataField: 'wateringDay3',
  text: 'Watering Day #3',
  align: 'center'
}, {
  dataField: "wateringTimes1Start",
  text: 'Watering Times #1 Start',
  align: 'center'
},{
  dataField: "wateringTimes1End",
  text: 'Watering Times #1 End',
  align: 'center'
}, {
  dataField: 'wateringTimes2Start',
  text: 'Watering Times #2 Start',
  align: 'center'
},{
  dataField: 'wateringTimes2End',
  text: 'Watering Times #2 End',
  align: 'center'
}];

// ============  Watson related code ===============


function askWatsonAboutZone(zoneNumber, zoneImage, cb) {
  console.log("Inside askwatsonAboutZone. Zone # = & zoneimage " + zoneNumber + zoneImage);

  var visualRecognition = new VisualRecognitionV3({
    api_key: '96b73c031b0fade5e9797f507c13f34541902f2c',
    version: '2016-05-20'
  });

  var images_file= createReadStream(zoneImage);
  var classifier_ids = ["DefaultCustomModel_30404095"];
  var threshold = 0.6;

  var params = {
  images_file: images_file,
  classifier_ids: classifier_ids,
  threshold: threshold
  };

  visualRecognition.classify(params, function(err, response) {
    if (err) {
      console.log(err);
      cb(err);
    }
    else {
      console.log(JSON.stringify(response, null, 2));
      var watsonClass = JSON.stringify( response.images[0].classifiers[0].classes[0].class);
      var watsonConfidence = JSON.stringify(response.images[0].classifiers[0].classes[0].score);
      console.log ('class and confidence are', watsonClass, watsonConfidence);
      cb(watsonClass);
    }
    
  });
}
//  ====== End of Watson related code
function callWatson(zoneNumber, myZoneData) {
  askWatsonAboutZone(zoneNumber, myZoneData.zoneImage, function (err, myZoneClass) {
    if (err)
      console.log("watson did not classify");
    else {
      if (myZoneClass !== 'unkown') {
        console.log('Watson classified it as ' + myZoneClass);
      }
    }
    if (myZoneClass === 'SickGrass')
      { myZoneData.watsonImageClass = 'Sick'}
      else if (myZoneClass === 'HealthyGrass'){
        myZoneData.myZoneClass = 'Healthy'
      }
      else myZoneData.myZoneClass = 'unknown';
  });
}

class Dashboard extends Component {
  state = {
    weatherTableData: [],
    cityRestrData: [],
    wateringZoneData: []
  };

  /////////////////////////////////////

  displayWeatherForecast = () =>
  {
    API.readWeatherFromDB()
    .then(res =>
      this.setState({
        weatherTableData: res.data
      })
    )
    .then(res => console.log(this.state.weatherTableData))
    .catch(err => console.log(err));
  }

  deleteWeatherForecastInDB = () =>
  {
    API.deleteWeatherForecastInDB();
  }

  getWeatherForecast = () => {
    console.log("In Weather.js/getWeatherForecast");
    API.getWeatherForecast();

    // API.deleteWeatherForecastInDB()
    //    .then (console.log("In Weather.js/getWeatherForecast. Old forecast deleted. Now we will get a new forecast"))
    //    .then (response => API.getWeatherForecast())
    //    .then (console.log("In Weather.js/getWeatherForecast"));
  }

/////////////////////////////////////
  
  displayWateringZone = () =>
  {
    API.readWateringZoneFromDB()
    .then(res =>
      this.setState({
        wateringZoneData: res.data
      })
    )
    .then(res => console.log(this.state.wateringZoneData))
    .catch(err => console.log(err));
  }

  deleteWateringZoneInDB = () =>
  {
    API.deleteWateringZoneInDB();
  }

  getWateringZone = () => {
    console.log("In Zone.js/getWateringZone");
    API.readWateringZoneFromDB();

    // API.deleteWateringZoneInDB()
    //    .then (console.log("In Zone.js/getWateringZone. Old deleted. Now we will get a new"))
    //    .then (response => API.getWateringZone())
    //    .then (console.log("In Zone.js/getWateringZone"));
  }

  /////////////////////////////////////
  
  displayCityRestr = () =>
  {
    API.readCityRestrFromDB()
    .then(res =>
      this.setState({
        cityRestrData: res.data
      })
    )
    .then(res => console.log(this.state.cityRestrData))
    .catch(err => console.log(err));
  }

  deleteCityRestr = () =>
  {
    API.deleteCityRestrInDB();
  }

  getCityRestr = () => {
    console.log("In Dashboard.js/getCityRestr");
    API.readCityRestrFromDB();

    // API.deleteWateringZoneInDB()
    //    .then (console.log("In Zone.js/getWateringZone. Old deleted. Now we will get a new"))
    //    .then (response => API.getWateringZone())
    //    .then (console.log("In Zone.js/getWateringZone"));
  }

// Compute zone status based on some simple logic
computeZoneStatus = () => {
  // Look at the zone details in the zone table and determine if and when to water
  // Ask watson for the image classification. If it syas 'Healthy' then no watering is needed.
  // If it says 'Sick' then wantering is needed.  As for when to water, you look at the watering restrictions
  // and decide the earliest time the zone can be watered.

  const zoneNumber = 4;  //  *** Hardwired for now ****
  console.log(this.state.wateringZoneData);
//  var myZoneData = JSON.parse(this.state.wateringZoneData).wateringZones[zoneNumber];
var myZoneData = this.state.wateringZoneData[zoneNumber];
  var myZoneStatus = 'AW'; // Assume the default is already watered
  var myZoneClass = 'unknown';
  
  callWatson(zoneNumber, myZoneData).then
    if (myZoneData.watsonImageClass === 'Healthy') {
      console.log ('No watering needed for zone' + zoneNumber);
      myZoneData.zoneStatus = 'AW';  // pretend it is already watered
    }
    else { if (myZoneData.watsonImageClass === 'Sick'){
            console.log ('Watering Needed for zone'  + zoneNumber)
            myZoneData.zoneStatus = 'NW';
      // check watering restrictions and set the next watering date
      //  *** Need explanation from Venkat on how the watering restrictions are specified
      }
    }
 
  }

  render() {
    return (
      <div>

          <div>
            <Jumbotron>
              <h6 className="text-center">
                <strong>Lawn Watering Zones</strong>
              </h6>
            </Jumbotron>
            <button className="btn btn-primary btn-sm" onClick={this.displayWateringZone}>Display Stored Zone Info</button>
            <button className="btn btn-success btn-sm" onClick={this.getWateringZone}>Update Stored Zone Info</button>           
            <button className="btn btn-warning btn-sm" onClick={this.deleteWateringZoneInDB}>Delete Stored Zone Info</button>          
            <button className="btn btn-primary btn-sm" onClick={this.computeZoneStatus}>Determine Zone Status</button>
            <BootstrapTable data={ this.state.wateringZoneData } columns={ zoneColumns } keyField="zoneNumber" striped={true} hover={true} responsive={true} />
          </div>

          <div>
            <Jumbotron>
              <h6 className="text-center">
                <strong>City Water Restrictions for Address</strong>
              </h6>
            </Jumbotron>
            <button className="btn btn-primary btn-sm" onClick={this.displayCityRestr}>Display City Restrictions</button>
            <button className="btn btn-success btn-sm" onClick={this.getCityRestr}>Update City Restrictions/button</button>           
            <button className="btn btn-warning btn-sm" onClick={this.deleteCityRestr}>Delete Stored Restrictions</button>          
            <BootstrapTable data={ this.state.cityRestrData } columns={ cityRestrColumns } keyField="_id" striped={true} hover={true} responsive={true} />
          </div>

          <div>
            <Jumbotron>
              <h6 className="text-center">
                Austin, TX: 10-day Weather Forecast
              </h6>
            </Jumbotron>
            <button className="btn btn-primary btn-sm" onClick={this.displayWeatherForecast}>Display Weather Forecast</button>
            <button className="btn btn-success btn-sm" onClick={this.getWeatherForecast}>Update Weather Forecast</button>           
            <button className="btn btn-warning btn-sm" onClick={this.deleteWeatherForecastInDB}>Delete Weather Forecast</button>          

            <BootstrapTable data={ this.state.weatherTableData } columns={ weatherColumns } keyField="epoch" striped={true} hover={true} responsive={true} />
          </div>
            <Footer/>
      </div>
      
    );
  }
}

export default Dashboard;