import React, { Component } from "react";
import Jumbotron from "../../components/Jumbotron";
// import Panel from "../../components/Panel";
// import Form from "../../components/Form";
// import Article from "../../components/Article";
// import WeatherTable from "../../components/WeatherTable";
import Footer from "../../components/Footer";
import API from "../../utils/API";
// import { Col, Row } from "../../components/Grid";
import { Col, Row, Container } from "../../components/Grid";
// import { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table-next';
import BootstrapTable from 'react-bootstrap-table-next';
import './react-bootstrap-table2.css'
// import { List } from "../../components/List";
import $ from 'jquery';

console.log("In client/src/pages/Weather/Weather.js");

// <img src="http://icons.wxug.com/i/c/k/clear.gif" alt=""/>
function imageFormatter(cell, row){
    // return "<img src='"+cell+"' alt='image'/>" ;
    // return '<Image src="'+cell+'" alt="image"/>' ;
    const imageStmtForRender= '<img src="'+cell+'" alt="image"/>';
    console.log("Image statement for rendering: ", imageStmtForRender);
    return imageStmtForRender;
    // return '<img src="'+cell+'" alt="image"/>' ;
}

var $wfTable = $('#wfTable');
    
const tableData = [
  {epoch: 1523318400, 
   day: "Thu", 
  // timeDate: "7:00 PM CDT on April 05, 2018", tempHigh: 79, tempLow: 68, avgHum: 86, pop:40, conditions: "Thunderstorm", 
   conditionsURL: <img src="http://icons.wxug.com/i/c/k/clear.gif" alt=""/> }
];

$(function () {
  $('#wfTable').bootstrapTable({
      data: tableData
  });
});

const columns = [{
  dataField: 'epoch',
  text: 'Epoch Time'
},{
  dataField: 'day',
  text: 'Day'
},
// {
//   dataField: 'timeDate',
//   text: 'Time and Date'
// }, {
//   dataField: 'tempHigh',
//   text: 'High Temp F'
// }, {
//   dataField: 'tempLow',
//   text: 'Low Temp F'
// }, {
//   dataField:'avgHum',
//   text: "Average Humidity"
// }, {
//   dataField:'pop',
//   text: "Probability of Precipitation (PoP)"
// }, {
//   dataField:'conditions',
//   text: "Conditions"
// }, 
{
  dataField:'conditionsURL',
  text: "Conditions URL",
  formatter: imageFormatter
}];

// class TableRow extends React.Component {
class TableRow extends Component {
  render() {
    const {
      data
    } = this.props;
    const row = data.map((data) =>
    <tr>
      <td key={data.name}>{data.name}</td>
      <td key={data.id}>{data.id}</td>
      <td key={data.price}>{data.price}</td>
    </tr>
    );
    return (
      <span>{row}</span>
    );
  }
}

// class Table extends React.Component {
class Table extends Component {
  // constructor(props) {
  //   super(props);
  // }
  render() {
    return (
      <table>
        <TableRow data={this.props.data} />
      </table>
    );
  }
}



class Weather extends Component {
  state = {
    weatherTableData: [],
  };

  displayWeatherForecast = () =>
  {
    API.readWeatherFromDB()
    .then(res =>
      this.setState({
        weatherTableData: res.data
      })
    )
    .then(res => console.log(this.state.weatherTableData))
    .catch(err => console.log(err));
  }

  deleteWeatherForecastInDB = () =>
  {
    API.deleteWeatherForecastInDB();
  }

  getWeatherForecast = () => {
    console.log("In Weather.js/getWeatherForecast");
    API.getWeatherForecast();
  }


  render() {
    return (
      <Container>
        <Row>
          <Col size="md-12">
            <Jumbotron>
              <h2 className="text-center">
                <strong>Austin, TX: 10-day Weather Forecast</strong>
              </h2>
            </Jumbotron>
            <button onClick={this.displayWeatherForecast}>Display Stored Weather Forecast</button>
            <button onClick={this.getWeatherForecast}>Update Stored Weather Forecast</button>           
            <button onClick={this.deleteWeatherForecastInDB}>Delete Stored Weather Forecast</button>          
          </Col>
        </Row>

        <Row>
           <Col size="md-12">   

              {/* <BootstrapTable data={ this.state.weatherTableData } columns={ columns } keyField="epoch" striped={true} hover={true} /> */}

              {/* <BootstrapTable data={ tableData } columns={ columns } keyField="epoch" striped={true} hover={true} /> */}


              {/* <Table data={tableData} /> */}


               <div className="table-responsive">          
                <table className="table" id="wfTable">
                   <thead>
                     <tr>
                        <th data-field="epoch">Epoch Time</th>
                        <th data-field="day">Day</th>
                        <th data-field="conditionURL">Condition Image </th>
                      </tr>
                    </thead>
                    <tbody>
                      <tr>

                      {/* // FOLLOWING DOESN"T WORK! */}
                        {/* <td> {tableData} </td> */}

                      {/* // FOLLOWING DOESN"T WORK! */}
                      {/*
                        <td> {tableData.epoch} </td>
                        <td> {tableData.day} </td>
                        <td> {tableData.conditionsURL} </td> */}


                      {/* // FOLLOWING WORKS! */}
                      {/*
                        <td>25</td>
                        <td>Thu</td>
                        <td><img src="http://icons.wxug.com/i/c/k/clear.gif" alt=""/></td>
                      */}

                      </tr>
                    </tbody>
                </table>
              </div>

           </Col>
        </Row>        
        <Footer />

      </Container>
    );
  }
}

export default Weather;